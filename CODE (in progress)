-- WORKING IN BIGQUERY

-- [1] UNDERSTAND DATA
-- 1. Understand the dataset: What is the top keywords in Google Trends and its percentage within dataset?
--> Finding: percentage is not significant (very small). There will be no need to make % chart when visualiziaing data.

WITH cte AS (
    SELECT 
      term, 
      COUNT(term) as count_term,
      (SELECT COUNT(term) FROM bigquery-public-data.google_trends.top_terms) AS count_total
    FROM 
      bigquery-public-data.google_trends.top_terms
    GROUP BY
      term 
    ORDER BY
      count_term desc
    )  

SELECT 
    term, 
    count_term, 
    count_total,
    ROUND (count_term/count_total*100, 2) AS percentage_pie
FROM 
    cte


-- 2. Understand the dataset: what is the score? what are the recent hot keywords?
-- (1) check the top keywords first

SELECT *
FROM bigquery-public-data.google_trends.top_terms
WHERE week = "2021-11-21" 
ORDER BY score DESC 

-- (2) check the lowest score for the keyword

SELECT *
FROM bigquery-public-data.google_trends.top_terms
WHERE week = "2021-11-21" -- found there are NULL values
      and score IS NOT NULL
ORDER BY score ASC


-- 3. Understand the dataset: what is the measured time frame?
--> Finding: first week is 2016-10-30 and the last week is 2021-11-21

-- (1) top_terms table

SELECT max(week), min(week)
FROM bigquery-public-data.google_trends.top_terms

-- (2) top_rising_terms table

SELECT max(week), min(week)
FROM bigquery-public-data.google_trends.top_rising_terms


-- 4. Understand the dataset: What is the difference between terms and rising terms? Compare the results.
--> Finding: Some keywords tend to appear in both tables. 

-- (1) top_terms table

SELECT *
FROM bigquery-public-data.google_trends.top_terms
WHERE week = "2021-11-21" AND dma_name = "Columbus OH"
ORDER BY score DESC,  term ASC 
LIMIT 100

-- (2) top_rising_terms table
SELECT *
FROM bigquery-public-data.google_trends.top_rising_terms
WHERE week = "2021-11-21" AND dma_name = "Columbus OH"
ORDER BY score DESC, term ASC
LIMIT 100


-- 5. Ask question: What are the top keyword appearing in both top_terms and top_rising_terms?
--> Finding: only 1 result. "49ers" with counts 54,600. Why? I noticed few keywords appearing in both tables via Exercise 4? Maybe BigQuery is case senstive?

SELECT terms.term, COUNT(terms.term) AS counts
FROM bigquery-public-data.google_trends.top_terms AS terms
JOIN 
    (SELECT term, COUNT(term) 
    FROM bigquery-public-data.google_trends.top_rising_terms 
    GROUP BY term 
    ORDER BY COUNT(term) desc) AS rterms
ON terms.term = rterms.term
GROUP BY terms.term
ORDER BY counts DESC 


-- 6. Aks question: Re-run the query by ignoring case sensitivity 
-- Finding: term column on top_terms table has capital letters. I used LOWER function to match column. Now I see 94 results with top keyword "Kyle Rittenhouse" with counts 383,460.

SELECT terms.term, COUNT(terms.term) as counts 
FROM bigquery-public-data.google_trends.top_terms AS terms
JOIN 
    (SELECT term, COUNT(term) 
    FROM bigquery-public-data.google_trends.top_rising_terms 
    GROUP BY term 
    ORDER BY count(term) desc) AS rterms
ON lower(terms.term) = rterms.term
GROUP BY terms.term
ORDER BY counts DESC 



-- WORKING IN TABLEAU AND BIGQUERY
-- [2] VERIFY DATA
-- Question: In Tableau, I inner joint top_terms with top_rising_terms. I got top keyword as "Kyle Rittenhouse" with counts# 1,526,280. WHY?
-- Verification: In BigQuery, I tried to answer this question. Where did 1,526,280 come from? 
-- Finding: Results from below query are 383,460 | 218,820 | 602,280
-- Follow up: In Tableau, I union-ed instead of join. Then I got top keyword as "Kyle Rittenhouse" with counts# 602,280.
-- Question2: Why does "Kyle Rittenhouse" keyword appear in year 2016? What am I missing?

WITH cte AS (
    SELECT 
        term, 
        count(term) AS counts1,
        (SELECT COUNT(term) FROM bigquery-public-data.google_trends.top_rising_terms WHERE term = "kyle rittenhouse") AS counts2
    FROM 
        bigquery-public-data.google_trends.top_terms
    WHERE term = "Kyle Rittenhouse"
    GROUP BY term)

SELECT counts1, counts2, counts1+counts2
FROM cte

